using System.Collections.Generic;
using Oxide.Game.Rust.Cui;
using UnityEngine;

namespace Oxide.Plugins
{
    [Info("CustomBGradeSkin", "Kina", "1.3.0")]
    [Description("Handles building upgrades with skins and shows GUI help for /bgrade help and /bskin help")]

    public class CustomBGradeSkin : RustPlugin
    {
        private const string HelpPanel = "BGradeSkinHelp.Panel";

        private class SkinProfile
        {
            public BuildingGrade.Enum Grade;
            public ulong SkinId;

            public SkinProfile(BuildingGrade.Enum grade, ulong skinId)
            {
                Grade = grade;
                SkinId = skinId;
            }
        }

        private class PlayerData
        {
            public BuildingGrade.Enum Grade = BuildingGrade.Enum.Twigs;
            public SkinProfile SkinOverride = null;
        }

        private Dictionary<ulong, PlayerData> playerData = new();

        private Dictionary<string, SkinProfile> skinProfiles = new Dictionary<string, SkinProfile>
        {
            { "adobe", new SkinProfile(BuildingGrade.Enum.Stone, 10220) },
            { "brick", new SkinProfile(BuildingGrade.Enum.Stone, 10223) },
            { "brutalist", new SkinProfile(BuildingGrade.Enum.Stone, 10225) },
            { "jungle", new SkinProfile(BuildingGrade.Enum.Stone, 10326) },
            { "container", new SkinProfile(BuildingGrade.Enum.Metal, 10221) }
            // Add more skins here as needed
        };

        [ChatCommand("bgrade")]
        private void CmdBGrade(BasePlayer player, string command, string[] args)
        {
            if (args.Length == 1 && args[0].ToLower() == "help")
            {
                ShowHelpUI(player, "/bgrade Help", new List<string>
                {
                    "<color=#00ffff>/bgrade <grade></color> - Set building upgrade grade",
                    "Grades:",
                    "0 = Twig",
                    "1 = Wood",
                    "2 = Stone",
                    "3 = Metal",
                    "4 = Armored",
                    "Note: Skin override will be disabled when using /bgrade"
                });
                return;
            }

            if (args.Length != 1 || !int.TryParse(args[0], out int gradeInt) || gradeInt < 0 || gradeInt > 4)
            {
                player.ChatMessage("Usage: /bgrade <grade> (0â€“4)");
                return;
            }

            var data = GetPlayerData(player);
            data.Grade = (BuildingGrade.Enum)gradeInt;

            if (data.SkinOverride != null)
            {
                data.SkinOverride = null;
                player.ChatMessage("Skin override disabled to allow proper grade upgrade.");
            }

            player.ChatMessage($"BGrade set to {data.Grade}.");
        }

        [ChatCommand("bskin")]
        private void CmdBSkin(BasePlayer player, string command, string[] args)
        {
            if (args.Length == 1 && args[0].ToLower() == "help")
            {
                var skins = string.Join(", ", skinProfiles.Keys);
                ShowHelpUI(player, "/bskin Help", new List<string>
                {
                    "<color=#00ffff>/bskin <skinName></color> - Set default skin for building",
                    "<color=#00ffff>/bskin off</color> - Disable skin override",
                    "Available skins:",
                    skins
                });
                return;
            }

            if (args.Length != 1)
            {
                player.ChatMessage("Usage: /bskin <skinName> or /bskin off");
                return;
            }

            var data = GetPlayerData(player);
            string arg = args[0].ToLower();

            if (arg == "off")
            {
                data.SkinOverride = null;
                player.ChatMessage("Skin override disabled.");
                return;
            }

            if (!skinProfiles.ContainsKey(arg))
            {
                player.ChatMessage($"Unknown skin '{arg}'. Type /bskin help for options.");
                return;
            }

            data.SkinOverride = skinProfiles[arg];
            player.ChatMessage($"Skin override set to '{arg}' (Grade: {data.SkinOverride.Grade}, ID: {data.SkinOverride.SkinId}).");
        }

        private PlayerData GetPlayerData(BasePlayer player)
        {
            if (!playerData.ContainsKey(player.userID))
                playerData[player.userID] = new PlayerData();
            return playerData[player.userID];
        }

        void OnEntityBuilt(Planner planner, GameObject go)
        {
            var player = planner?.GetOwnerPlayer();
            if (player == null || go == null) return;

            var block = go.GetComponent<BuildingBlock>();
            if (block == null) return;

            var data = GetPlayerData(player);

            if (data.SkinOverride != null)
            {
                block.SetGrade(data.SkinOverride.Grade);
                block.skinID = data.SkinOverride.SkinId;
            }
            else
            {
                block.SetGrade(data.Grade);
            }

			block.health = block.MaxHealth();
            block.SendNetworkUpdate();
        }

        [ConsoleCommand("bgradeskinui.close")]
        private void CmdClose(ConsoleSystem.Arg arg)
        {
            var player = arg.Player();
            if (player != null)
                CuiHelper.DestroyUi(player, HelpPanel);
        }

        private void ShowHelpUI(BasePlayer player, string title, List<string> lines)
        {
            CuiHelper.DestroyUi(player, HelpPanel);

            var container = new CuiElementContainer();

            container.Add(new CuiElement
            {
                Name = HelpPanel,
                Parent = "Overlay",
                Components =
                {
                    new CuiImageComponent { Color = "0 0 0 0.85" },
                    new CuiRectTransformComponent { AnchorMin = "0.3 0.2", AnchorMax = "0.7 0.8" },
                    new CuiNeedsCursorComponent()
                }
            });

            container.Add(new CuiElement
            {
                Name = "BGradeSkinHelp.Title",
                Parent = HelpPanel,
                Components =
                {
                    new CuiTextComponent
                    {
                        Text = title,
                        FontSize = 24,
                        Align = TextAnchor.UpperCenter,
                        Color = "1 1 1 1"
                    },
                    new CuiRectTransformComponent { AnchorMin = "0 0.86", AnchorMax = "1 0.98" }
                }
            });

            container.Add(new CuiElement
            {
                Name = "BGradeSkinHelp.Content",
                Parent = HelpPanel,
                Components =
                {
                    new CuiTextComponent
                    {
                        Text = string.Join("\n", lines),
                        FontSize = 18,
                        Align = TextAnchor.UpperLeft,
                        Color = "1 1 1 1"
                    },
                    new CuiRectTransformComponent { AnchorMin = "0.05 0.14", AnchorMax = "0.95 0.84" }
                }
            });

            var closeButton = new CuiButton
            {
                Button = { Color = "0.8 0.2 0.2 1", Command = "bgradeskinui.close" },
                RectTransform = { AnchorMin = "0.4 0.04", AnchorMax = "0.6 0.11" },
                Text = { Text = "Close", Align = TextAnchor.MiddleCenter, FontSize = 18 }
            };
            container.Add(closeButton, HelpPanel);

            CuiHelper.AddUi(player, container);
        }

        void OnPlayerDisconnected(BasePlayer player) => CuiHelper.DestroyUi(player, HelpPanel);
        void OnPlayerRespawned(BasePlayer player) => CuiHelper.DestroyUi(player, HelpPanel);
        void OnPlayerDeath(BasePlayer player, HitInfo info) => CuiHelper.DestroyUi(player, HelpPanel);
    }
}
