using System.Collections.Generic;
using UnityEngine;

namespace Oxide.Plugins
{
    [Info("CustomBGradeSkin", "Emil", "1.0.0")]
    [Description("Unified building grade and skin plugin with text-based control")]

    public class CustomBGradeSkin : RustPlugin
    {
        private const string permUse = "custombgradeskin.use";

        private readonly Dictionary<ulong, BuildingGrade.Enum> PlayerGrades = new();
        private readonly Dictionary<ulong, string> PlayerSkins = new();

        private readonly Dictionary<string, SkinProfile> SkinProfiles = new()
        {
            { "adobe", new SkinProfile(BuildingGrade.Enum.Stone, 10220) },
            { "brick", new SkinProfile(BuildingGrade.Enum.Stone, 10223) },
            { "brutalist", new SkinProfile(BuildingGrade.Enum.Stone, 10225) },
            { "jungle", new SkinProfile(BuildingGrade.Enum.Stone, 10326) },
            { "container", new SkinProfile(BuildingGrade.Enum.Metal, 10221) }
            // Add more skins here as needed
        };

        private class SkinProfile
        {
            public BuildingGrade.Enum Grade;
            public ulong SkinId;

            public SkinProfile(BuildingGrade.Enum grade, ulong skinId)
            {
                Grade = grade;
                SkinId = skinId;
            }
        }

        void Init()
        {
            permission.RegisterPermission(permUse, this);
        }

        [ChatCommand("bgrade")]
        private void CmdBGrade(BasePlayer player, string command, string[] args)
        {
            if (!permission.UserHasPermission(player.UserIDString, permUse))
            {
                SendReply(player, "You don't have permission to use /bgrade.");
                return;
            }

            if (args.Length != 1 || !int.TryParse(args[0], out int gradeInt) || gradeInt < 0 || gradeInt > 4)
            {
                SendReply(player, "Usage: /bgrade <0-4> (0=Twig, 1=Wood, 2=Stone, 3=Metal, 4=Armored)");
                return;
            }

            var grade = (BuildingGrade.Enum)gradeInt;
            PlayerGrades[player.userID] = grade;
            SendReply(player, $"Building grade set to: {grade}");
        }

        [ChatCommand("bskin")]
        private void CmdBSkin(BasePlayer player, string command, string[] args)
        {
            if (!permission.UserHasPermission(player.UserIDString, permUse))
            {
                SendReply(player, "You don't have permission to use /bskin.");
                return;
            }

            if (args.Length != 1)
            {
                SendReply(player, "Usage: /bskin <skinname> or /bskin off");
                return;
            }

            string skin = args[0].ToLower();

            if (skin == "off")
            {
                PlayerSkins.Remove(player.userID);
                SendReply(player, "Building skin disabled.");
                return;
            }

            if (!SkinProfiles.ContainsKey(skin))
            {
                SendReply(player, $"Skin '{skin}' not recognized.");
                return;
            }

            PlayerSkins[player.userID] = skin;
            PlayerGrades[player.userID] = SkinProfiles[skin].Grade; // Auto-switch grade
            SendReply(player, $"Building skin set to: {skin} (Grade auto-switched to {SkinProfiles[skin].Grade})");
        }

        private void OnEntityBuilt(Planner planner, GameObject go)
        {
            var player = planner?.GetOwnerPlayer();
            var block = go?.GetComponent<BuildingBlock>();
            if (player == null || block == null) return;

            // Determine grade
            BuildingGrade.Enum grade = PlayerGrades.TryGetValue(player.userID, out var g) ? g : BuildingGrade.Enum.Twigs;
            block.SetGrade(grade);
            block.health = block.MaxHealth();

            // Apply skin if set
            if (PlayerSkins.TryGetValue(player.userID, out var skinName) &&
                SkinProfiles.TryGetValue(skinName, out var profile))
            {
                block.skinID = profile.SkinId;
                block.SendNetworkUpdate();
            }
        }
    }
}
